<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Roc's Blog]]></title>
  <link href="http://zpc5686.github.io/atom.xml" rel="self"/>
  <link href="http://zpc5686.github.io/"/>
  <updated>2015-07-22T00:24:38+08:00</updated>
  <id>http://zpc5686.github.io/</id>
  <author>
    <name><![CDATA[Roc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes of Stanford iOS Dev]]></title>
    <link href="http://zpc5686.github.io/blog/2015/01/20/notes-of-stanford-ios-dev/"/>
    <updated>2015-01-20T22:31:37+08:00</updated>
    <id>http://zpc5686.github.io/blog/2015/01/20/notes-of-stanford-ios-dev</id>
    <content type="html"><![CDATA[<p>以前在S的时候做过iOS的开发，但那时候总感觉自己学的不够扎实，基本上都是靠着githbub、stackoverflow以及apple的官方文档过来的，没有对iOS开发有一个系统对了解。</p>

<h2>第一讲</h2>

<p>课程刚开始是一些闲话，需要一些前导课等等。后面提到一个APP分为4层，从下往上依次是
* core os 一个unix内核，socket等等都封装在这一层
* core services 数组、字典、GPS、多线程等等
* media 视频图像处理等
* Cocoa touch 各个控件，是高级对象</p>

<h3>MVC 设计模式</h3>

<p>MVC是iOS应用的设计模式
* model与view之间永远不能通信
* view与controller之间通信的时候用的target action方法，我们在手机上碰到某些控件的时候会触发一些事件。这些事件有will、should、did这三种响应</p>

<h3>setter and getter</h3>

<p>objective-c 将实例变量封装成了一个property。oc中所有对象都存于堆中，在栈上不能分配对象。
<code>@property (strong) NSString *content</code>
调用的时候card.content
strong （reference countting） 只要有strong指针指向它时，就不会被销毁。
weak 当没有strong pointer 指向它时 weak pointer变成nil，而且会销毁那块内存。</p>

<p>nonatomic 线程不安全。getter和setter可以重命名。</p>

<h3>学生提问</h3>

<ul>
<li>所有的对象都要被指针指着，</li>
<li>可以用[ ]来调用getter和setter，但是不推荐</li>
<li>除了getter和setter之外的方法不能用打点调用</li>
</ul>


<h2>第二讲</h2>

<p>1、上来就写了一个新类 Deck。
2、向NSMutableArray里插入nil后会使程序crash掉。
3、property可以用来给getter重新起名字比如
@property (nonatomic,getter=isMatched) BOOL matched;
在这里使用getter的时候用self.isMatched，而使用setter的时候还是要永self.mathced;
4、</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Dont Know Switch]]></title>
    <link href="http://zpc5686.github.io/blog/2014/09/12/you-dont-know-switch/"/>
    <updated>2014-09-12T23:21:44+08:00</updated>
    <id>http://zpc5686.github.io/blog/2014/09/12/you-dont-know-switch</id>
    <content type="html"><![CDATA[<h2>你可能不知道的switch</h2>

<p>switch语句是一个常用的分支语句，可以让代码更加直观。其实switch的功能是可以被<code>if else</code>替代的。使用switch可以让代码的结构更加清晰，就像新的swift 2.0中加入<code>guard</code>一样。为了增加代码的可读性。</p>

<p>不过switch有时候也会有点调皮，比如下面的代码</p>

<p>`</p>

<p>  void foo(int a)</p>

<pre><code>{
      switch(a)
            {
                case 1:
                      printf("case 1\n");
                            break;
                                if(a&gt;3)
                                    {
                                           case 2:
                                                printf("case 2\n");
                                                      break;
                                                          }
                                                              default :
                                                                    printf("default\n");
                                                                          break;
                                                                                }
                                                                                  }
                                                                                    int main()
                                                                                      {
                                                                                           foo(2);
                                                                                               return 0;
                                                                                                }
                                                                                                `

                                                                                                在Ubuntu下用clang和gcc分别编译后，得到的结果都一样，具体是啥大家试一下哈。

                                                                                                虽然上面这个代码片段有问题，但是可以成功地说明，switch的本质就是对条件的匹配！在它的内部是不能做if判断的。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Config Vim and Often Used Shortcuts of Terminator]]></title>
    <link href="http://zpc5686.github.io/blog/2014/08/26/config-vim-and-often-used-shortcuts-of-terminator/"/>
    <updated>2014-08-26T23:04:52+08:00</updated>
    <id>http://zpc5686.github.io/blog/2014/08/26/config-vim-and-often-used-shortcuts-of-terminator</id>
    <content type="html"><![CDATA[<h2>将Vim打造成Python开发的编辑器</h2>

<p>说起Python开发，你要是在windows平台下进行多少有点不专业。而且第三方的很多包啊，模块啊，都是针对Linux系统开发。要知道Linux是没有IDE的，开发的时候编辑器与编译器等模块是分开的。Vim作为一款历史悠久的编辑器，可以胜任Linux下任何语言的开发。在这里记录一下使用Python开发时所用到的插件。</p>

<h3>NerdTree</h3>

<p>看这个名字Nerd难道还不够diors吗，不要小看它，它可以在Vim中扩展出一个目录结构来。安装方法如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone https://github.com/scrooloose/nerdtree.git
</span></code></pre></td></tr></table></div></figure>


<p>我喜欢用F3来开关NerdTree,需要在 ~/.vimrc中添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;
</span><span class='line'>map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;
</span></code></pre></td></tr></table></div></figure>


<p>你可以从<a href="https://github.com/scrooloose/nerdtree">这里</a>看到nerdtree的源代码。</p>

<h3>Taglist</h3>

<p>这个插件用来快速定位类中函数，分析源代码的结构。可以从<a href="http://sourceforge.net/projects/vim-taglist/files/">这里</a>下载。</p>

<h3>Pydiction</h3>

<p>这个厉害了，我最初都在想有没有插件想VS那样可以打点进行调用的，答案是肯定的。利用这个插件很方便地实现。
首先，需要下载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone https://github.com/rkulla/pydiction.git
</span></code></pre></td></tr></table></div></figure>


<p>下载好了发现是几个文件，需要对他们进行拷贝</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp pydiction-1.2/python_pydiction.vim   ~/.vim/after/ftplugin/
</span><span class='line'>cp pydiction-1.2/complete-dict       ~/.vim/tools/pydiction/complete-dict
</span></code></pre></td></tr></table></div></figure>


<p>没有目录的要先建立目录，我今天就是吃了这个亏了。 然后在~/.vimrc中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">let </span><span class="nv">Tlist_Auto_Highlight_Tag</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Auto_Open</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Auto_Update</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Display_Tag_Scope</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Exit_OnlyWindow</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Enable_Dold_Column</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_File_Fold_Auto_Close</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Show_One_File</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Use_Right_Window</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Use_SingleClick</span><span class="o">=</span>1
</span><span class='line'>nnoremap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>filetype plugin on
</span><span class='line'>autocmd FileType python <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>pythoncomplete#Complete
</span><span class='line'>autocmd FileType javascrīpt <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>javascriptcomplete#CompleteJS
</span><span class='line'>autocmd FileType html <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>htmlcomplete#CompleteTags
</span><span class='line'>autocmd FileType css <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>csscomplete#CompleteCSS
</span><span class='line'>autocmd FileType xml <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>xmlcomplete#CompleteTags
</span><span class='line'>autocmd FileType php <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>phpcomplete#CompletePHP
</span><span class='line'>autocmd FileType c <span class="nb">set </span><span class="nv">omnifunc</span><span class="o">=</span>ccomplete#Complete
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">let </span>g:pydiction_location<span class="o">=</span><span class="s1">&#39;~/.vim/tools/pydiction/complete-dict&#39;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">tabstop</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span>expandtab
</span><span class='line'><span class="nb">set </span>number
</span></code></pre></td></tr></table></div></figure>


<p>这么多插件，可能需要一个管理的，这里使用<a href="https://github.com/tpope/vim-pathogen">pathogen</a></p>

<h2>Terminator 快捷键</h2>

<p>几个常用的
Ctrl+Shift+O
Split terminals Horizontally.（上下开新窗口）
Ctrl+Shift+E
Split terminals Vertically.（垂直开新窗口）
Alt+Up
Move to the terminal above the current one.（切换当前窗口）
Ctrl+Shift+W
Close the current terminal.
Ctrl+Shift+Q
Quits Terminator</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminator Login Shell Bug]]></title>
    <link href="http://zpc5686.github.io/blog/2014/08/22/terminator-login-shell-bug/"/>
    <updated>2014-08-22T00:14:15+08:00</updated>
    <id>http://zpc5686.github.io/blog/2014/08/22/terminator-login-shell-bug</id>
    <content type="html"><![CDATA[<h2>先说点闲话</h2>

<p>这个域名已经申请了一年了，最开始是准备用来记录毕业论文的撰写流程的。
当时的想法很简单，就是每天编程，然后晚上将白天编程过程中遇到的问题记录下来用博客的形式记录下来，这样写论文的时候也不至于没有东西可以写吧。
可惜没有坚持下来。。。这也是我最近在改正的一个毛病 <strong>想法多，实现少。</strong> 或者说是 <strong>说的多，做的少</strong> 。
下面来写一下今天用Terminator这个终端神器时候遇到的问题吧。</p>

<h2>Terminator 的bug</h2>

<p>Terminator的强大之处已经有很多人介绍过了。我比较喜欢它可以全屏使用，就像是在文字登陆的Linux上操作。
非常带感。当然这不是重点，重点是我今天用RVM指定ruby版本的时候，被提示到：</p>

<p>我设置完了以后，重新登陆Terminator结果发现没有变啊，RVM还是不能USE。
然后我想可能是Terminator启动的时候读配置文件会覆盖吧，于是找到配置文件发现没有相关变量。
我想不会是个bug吧。于是Google，发现讨论组里已经有很多人遇到了，而且没有解决。不过针对我这个问题有个workaround。就是在.bashrc中添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[[</span> -s <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.rvm/scripts/rvm <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.rvm/scripts/rvm
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
